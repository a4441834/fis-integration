<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd             http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd       http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context-4.2.xsd       ">
    <!-- Define a traditional camel context here -->
    
    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
    
    	<!-- define property file for camel context, encryption enabled by jasypt -->
        <propertyPlaceholder id="urls" location="${env:APP_PROPERTY_FILE}" propertiesParserRef="jasypt"/>
        
        <!-- define rest endpoint, for retreiving values from JDG -->
        <restConfiguration bindingMode="auto" component="undertow" port="{{rest.port}}"/>
        
        <!-- moved to rest.xml for spring boot (see application.properties), uncomment for testing in camel:run          -->
        <!--  have to define here are turning off auto config -->
        <rest path="/sensor">
            <get consumes="text/plain" produces="application/json" uri="/{id}">
                <to uri="direct:sensorData"/>
            </get>
        </rest>

         
        <!--  main route to subscribe to remote MQTT endpoints and pass the data to downstream endpoints -->
        <route id="incoming_route">

            <from id="from_mqtt" uri="mqtt://endpoint?host={{incoming.amq.url.mqtt}}&amp;userName={{incoming.amq.username}}&amp;password={{incoming.amq.password}}&amp;subscribeTopicNames={{incoming.topic.names}}"/>
            <setHeader headerName="IncomingChannel" id="_setIncomingChannel">
                <simple>${header.CamelMQTTSubscribeTopic}</simple>
            </setHeader>
            <process id="incoming_route_topic_processor" ref="topicProcessor"/>
            <log id="_mqtt_log_header" message="header:  ${headers}"/>
            <log id="_mqtt_log" message="Received mqtt message:  ${body}"/>
            <multicast id="_multicast1">
                <to id="_to_amq" uri="direct:amq"/>
                <to id="_to_jdg" uri="direct:jdg"/>
                <to id="_to_brms" uri="direct:brms"/>
            </multicast>
        </route>
        <route id="brms_route">
            <from id="brms_route_direct" uri="direct:brms"/>
            <setHeader headerName="CamelHttpMethod" id="_setHeader1">
                <constant>POST</constant>
            </setHeader>
            <setHeader headerName="Exchange.CONTENT_TYPE" id="_setHeader2">
                <constant>application/json</constant>
            </setHeader>
            <log id="brms_route_log1" message="incoming ${body}"/>
            <to id="_to2" uri="bean:brmsBean?method=prepareQuery"/>
            <!--  only send to brms if the data is the right one -->
            <choice id="check psi">
            	<when>
            		<simple>${body} != ''</simple>
		            <to id="_to1" uri="http4://{{brms.url}}?authPassword={{brms.password}}&amp;authUsername={{brms.username}}"/>
		            <to id="_to3" uri="bean:brmsBean?method=extractValue"/>
            	</when>
            		<otherwise>
            			<setHeader headerName="NOTIFY_FLAG">
							<constant>N</constant>
            			</setHeader>
            		</otherwise>
            </choice>
            <choice id="_choice1">
                <when id="_when1">
                    <simple>${header.NOTIFY_FLAG} == 'Y' </simple>
                    <log id="_log1" message="Send notification"/>
                    <to id="_to4" uri="direct:sendNotification"/>
                </when>
                <otherwise id="_otherwise1">
                    <log id="_log2" message="No need to send notifications for PSI status: ${body}"/>
                </otherwise>
            </choice>
        </route>
        <route id="notification_route">
            <from id="_from1" uri="direct:sendNotification"/>
            <setBody id="_setBody1">
                <simple>PSI Level at  ${date:now:yyyy-MM-dd hh:mm}  : ${header.PSI_STATUS}</simple>
            </setBody>
            <log id="_log3" message="sendNotification"/>
            <removeHeaders id="remoteHeadersBeforeSend" pattern="*"/>
            <choice id="_choice2">
                <when id="_when2">
                    <simple>${header.NOTIFY_TYPE} == 'email' </simple>
                    <log id="_log4" message="Send email notification"/>
                    <to id="_to5" uri="smtp://{{email.credentials}}@{{email.url}}"/>
                </when>
                <when id="_when3">
                    <simple>${header.NOTIFY_TYPE} == 'slack' </simple>
                    <log id="_log5" message="Send Slack notification"/>
                    <to id="_to6" uri="{{slack.webhook}}"/>
                </when>
                <otherwise id="_otherwise2">
                    <log id="_log6" message="notify all"/>
                    <to id="_to6" uri="{{slack.webhook}}"/>
                    <to id="_to7" uri="smtp://{{email.credentials}}@{{email.url}}"/>
                </otherwise>
            </choice>
        </route>
        <route id="amq_route">
            <!-- 
            <to id="amq_route_to_amq" uri="mqtt://dummy?host={{outgoing.amq.url.mqtt}}&amp;userName={{outgoing.amq.username}}&amp;password={{outgoing.amq.password}}&amp;publishTopicName={{outgoing.topic.names}}"/>
			<to id="amq_route_to_topic" uri="mqtt://dummy?host={{outgoing.amq.url.mqtt}}&amp;userName={{outgoing.amq.username}}&amp;password={{outgoing.amq.password}}&amp;publishTopicName=${header.OutgoingChannel}"/>
			 -->
            <!-- desintation is dynamically set in topicProcessor -->
            <from id="amq_route_direct" uri="direct:amq"/>
            <toD id="amq_route_to_topic" uri="${header.OutgoingAMQURI}"/>
        </route>
        <!-- reminder for topic separators, '/' will be used as '.' and vice versa -->
        
        <!--
         route for storing incoming  data into JDG
         Every topic name will have a corresponding array to store the incoming data
        -->
        <route id="jdg_route">
            <from id="jdg_route_from1" uri="direct:jdg"/>
            <setHeader headerName="IncomingData" id="jdg_route_setHeader1">
                <simple>${body}</simple>
            </setHeader>
            <setHeader headerName="CamelInfinispanKey" id="jdg_route_setHeader2">
                <simple>${header.JDGTopic}</simple>
            </setHeader>
            <log id="_sensor_log3" message="JDG GET:  ${header.CamelInfinispanKey}"/>
            <!-- get the array out to store in the latest value-->
            <to id="jdg_route_read_array" uri="infinispan://{{jdg.host}}?cacheContainer=#cacheManager&amp;cacheName={{jdg.cache.name}}&amp;command=GET"/>
            <log id="jdg_route_log2" logName="remote-get"
                loggingLevel="INFO" message="GET entry ${header.CamelInfinispanKey}   with value ${header.CamelInfinispanOperationResult}"/>
            <!--  Processor to check if entry already exist, if not create new one, if yes, add to the array-->
            <process id="_process1" ref="jdgProcessor"/>
            <log id="_sensor_log2" message="JDG PUT:  ${header.CamelInfinispanKey}"/>
            <to id="jdg_route_write" uri="infinispan://{{jdg.host}}?cacheContainer=#cacheManager&amp;cacheName={{jdg.cache.name}}&amp;command=PUT"/>
            <log id="jdg_route_log1" logName="remote-put"
                loggingLevel="INFO" message="Updated entry ${header.CamelInfinispanKey} with value ${header.CamelInfinispanValue}"/>
            <to id="jdg_route_read" uri="infinispan://{{jdg.host}}?cacheContainer=#cacheManager&amp;cacheName={{jdg.cache.name}}&amp;command=GET"/>
            <setBody id="jdg_route_getresult">
                <simple>${header.CamelInfinispanOperationResult}</simple>
            </setBody>
            <log id="jdg_route_log2" logName="remote-get"
                loggingLevel="INFO" message="GET entry ${header.CamelInfinispanKey} with value ${body}"/>
        </route>
        
        <!-- http://192.168.223.130:8082/sensor/001 -->
        <!--  route for retrieving values from JDG based on topic name -->

        <route id="rest_route">
            <from id="_from2" uri="direct:sensorData"/>
            <log id="_sensor_log" message="sensor:  ${header.id}"/>
            <setHeader headerName="CamelInfinispanKey" id="getdata_setHeader1">
                <simple>${header.id}</simple>
            </setHeader>
            <to id="getdata_read" uri="infinispan://{{jdg.host}}?cacheContainer=#cacheManager&amp;cacheName={{jdg.cache.name}}&amp;command=GET"/>
            <setBody id="getdata_getresult">
                <simple>${header.CamelInfinispanOperationResult}</simple>
            </setBody>
            <log id="getdata_log2" logName="getdata_log"
                loggingLevel="INFO" message="REST call : ${body}"/>
        </route>
    </camelContext>
    <!-- 
    Have disabled autoconfig for camel components ,else  use @Components
     -->
    <bean class="com.demo.jdg.RemoteCacheManagerFactory" id="remoteCacheManagerFactory">
        <constructor-arg value="${jdg.url}"/>
    </bean>
    <bean factory-bean="remoteCacheManagerFactory"
        factory-method="getRemoteCacheManager" id="cacheManager"/>

<!--     <context:property-placeholder location="classpath*:props_dev.properties"/> -->
    <bean class="com.demo.processor.JDGProcessor" id="jdgProcessor"/>
    <bean class="com.demo.processor.TopicProcessor" id="topicProcessor"/>
    <bean class="com.demo.processor.BrmsProcessor" id="brmsProcessor"/>
    <bean class="com.demo.processor.BrmsBean" id="brmsBean"/>
    <bean class="org.apache.camel.component.slack.SlackComponent" id="slack">
        <property name="webhookUrl" value="https://hooks.slack.com/services/${slack.webhook.endpoint}"/>
    </bean>
    
    <!-- jasypt related-->
<bean id="jasypt" class="org.apache.camel.component.jasypt.JasyptPropertiesParser">
    <property name="algorithm" value="PBEWITHMD5ANDDES" />
    <property name="password" value="sysenv:APP_PASSWORD"/>
</bean>
     
<bean id="environmentVariablesConfiguration" class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
    <property name="algorithm" value="PBEWITHMD5ANDDES" />
    <property name="passwordEnvName" value="APP_PASSWORD" />
</bean>       
<bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
    <property name="config" ref="environmentVariablesConfiguration" />
</bean> 

<bean id="propertyConfigurer" class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer"> 
    <constructor-arg ref="configurationEncryptor" /> 
<!--     <property name="location" value="classpath:app.properties"/> -->
    <property name="location" value="classpath:#{systemEnvironment['APP_PROPERTY_FILE']}"/>
</bean>    
</beans>
